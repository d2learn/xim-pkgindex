package = {
    -- base info
    name = "git-autosync",
    description = "XScript: Git AutoSync Tools",

    authors = "sunrisepeak",
    maintainers = "d2learn",
    licenses = "Apache-2.0",
    repo = "https://github.com/d2learn/xim-pkgindex",

    -- xim pkg info
    type = "script",
    status = "stable", -- dev, stable, deprecated
    categories = {"git", "autosync", "task" },
    keywords = {"git", "task"},

    xpm = {
        linux = { ["0.0.1"] = { } },
    },
}

import("xim.libxpkg.log")
import("xim.libxpkg.xvm")
import("xim.libxpkg.system")
import("xim.libxpkg.utils")

function uninstall()
    log.info("Uninstalling git-autosync...")
    -- remove from /etc/cron.d
    system.exec("sudo rm -f /etc/cron.d/git-autosync-crontab")
    system.exec("sudo systemctl restart cron")
    xvm.remove("git-autosync")
    log.info("git-autosync uninstalled.")
    return true
end

-- xscript code area

import("core.base.json")

local __git_autosync_sh = [[
#!/bin/bash
# - security-only-ready, dont modify this file

XLINGS_BINDIR=/home/xlings/.xlings_data/bin
export PATH="$XLINGS_BINDIR:$PATH"

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_DIR="$1"
POST_COMMAND="$2"

current_time=$(date "+%Y-%m-%d %H:%M:%S")

echo "[$current_time] AutoSyncing project in $PROJECT_DIR"

cd "$PROJECT_DIR" || exit

echo "[$current_time] git pull origin..."
git pull origin
echo "[$current_time] run post command <$POST_COMMAND> ..."
$POST_COMMAND
]]

local scriptdir = os.scriptdir()
local task_list_file = path.join(scriptdir, "git-autosync-tasks.json")
local crontab_file = path.join(scriptdir, "git-autosync-crontab")
local log_file = path.join(scriptdir, "git-autosync.log")
local git_autosync_sh_file = path.join(scriptdir, "git-autosync.sh")

function config_file_check()
    log.info("git-autosync config check...")

    if not os.isfile(git_autosync_sh_file) then
        io.writefile(git_autosync_sh_file, __git_autosync_sh)
        os.exec("chmod +x %s", git_autosync_sh_file)
    end

    if not os.isfile(crontab_file) then
        io.writefile(crontab_file, [[
# Auto-generated by git-autosync, do not modify this file directly.
# Use 'xscript git-autosync add/remove' to manage tasks.

# PATH & SHELL
SHELL=/bin/bash
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

    ]])
    end
    
    if not os.isfile(log_file) then
        io.writefile(log_file, "")
    end

    if not os.isfile(task_list_file) then
        io.writefile(task_list_file, "{}")
    end
end

function time_format(cmds)

    if not cmds["--time"] then
        return "* * * * *"
    end

    local times = cmds["--time"]:split(" ")
    local append_cnt = #times - 5
    -- append * to make it 5 parts(insert * at the beginning)
    for i = 1, append_cnt do
        table.insert(times, 1, "*")
    end
    return table.concat(times, " ")
end

function to_crontab_task(cmds)
    local parts = cmds["--time"]:split(" ")
    -- revert to time format
    cmds["--time"] = string.format("%s %s %s %s %s", parts[5], parts[4], parts[3], parts[2], parts[1])

    local task = ""
    
    if os.isdir(path.join(cmds["--project-dir"], ".git")) then
        task = string.format("\n%s %s %s %s %s >> %s 2>&1\n",
            cmds["--time"], os.getenv("USER"),
            path.join(scriptdir, "git-autosync.sh"), cmds["--project-dir"], cmds["--post-command"] or "",
            log_file
        )
    end 

    -- TODO: to support windows
    local git_auto_sync_bin = "/home/xlings/.xlings_data/bin/git-autosync"
    if os.isfile(path.join(cmds["--project-dir"], ".git-autosync")) then
        task = task .. string.format("\n%s %s %s >> %s 2>&1\n",
            cmds["--time"], os.getenv("USER"),
            string.format("%s sync %s", git_auto_sync_bin, cmds["--project-dir"]),
            log_file
        )
    end

    log.info("Crontab task: %s", task)
    return task
end

-- todo: support windows task scheduler
function sync_to_system()
    -- sync to /etc/cron.d
    log.warn("Updating system crontab, you may be asked for your password...")
    system.exec(string.format("sudo cp -f %s /etc/cron.d/git-autosync-crontab", crontab_file))
    system.exec("sudo chmod 644 /etc/cron.d/git-autosync-crontab")
    system.exec("sudo systemctl restart cron")
end

function action_add(cmds, task_list)

    if not task_list then
        task_list = json.loadfile(task_list_file) or {}
    end

    if task_list[cmds["--project-dir"]] then
        log.warn("Task for project dir [ %s ] already exists!", cmds["--project-dir"])
        return
    end

    task_list[cmds["--project-dir"]] = {
        time = cmds["--time"],
        postCommand = cmds["--post-command"],
    }
    local crontab_content = io.readfile(crontab_file) or ""
    if not crontab_content:find(cmds["--project-dir"]) then
        crontab_content = crontab_content .. to_crontab_task(cmds)
        io.writefile(crontab_file, crontab_content)
        sync_to_system()
    else
        log.warn("Crontab for project dir [ %s ] already exists!", cmds["--project-dir"])
    end

    json.savefile(task_list_file, task_list, { indent = true })

    log.info("Task for project dir [ %s ] added!", cmds["--project-dir"])
end


function action_sync(cmds)

    local project_file = path.join(cmds["--project-dir"], ".git-autosync")
    local project_topdir = path.join(cmds["--project-dir"], "git-autosync")

    if not os.isfile(project_file) then
        log.error("Project dir [ %s ] does not have .git-autosync file!", cmds["--project-dir"])
        return
    end

    os.cd(cmds["--project-dir"])

    if not os.isdir(project_topdir) then
        os.mkdir(project_topdir)
    end

    -- file content: git-url post-command
    local content = io.readfile(project_file)
    local project_cnt = 0

    for line in content:gmatch("[^\r\n]+") do
        local git_url = line:trim() -- remove comments and trim
        local git_project_name = path.filename(git_url):replace(".git", "")

        local repo_dir = path.join(project_topdir, git_project_name)

        log.info("[%d] Syncing repository: %s to %s", project_cnt, git_url, repo_dir)
        project_cnt = project_cnt + 1

        if not os.isdir(repo_dir) then
            log.info("Cloning repository %s into %s", git_url, repo_dir)
            os.exec("git clone --recursive %s %s", git_url, repo_dir)
        else
            log.info("Pulling latest changes for repository %s", git_url)
            os.cd(repo_dir)
            os.exec("git pull origin")
            os.cd(cmds["--project-dir"])
        end
    end

    log.info("Sync completed for project dir [ %s ]!", cmds["--project-dir"])
end

function action_help()
    cprint("${bright}Git AutoSync Tools - 0.0.1${clear}")
    cprint("")
    cprint("Usage: xscript git-autosync <action> [options]")
    cprint("")
    cprint("Actions:")
    cprint("  add       Add a new git autosync task")
    cprint("  list      List all git autosync tasks")
    cprint("  remove    Remove a git autosync task")
    cprint("  log       Show the last 20 lines of the log file")
    cprint("")
    cprint("Options:")
    cprint("  --project-dir <path>   The project directory to sync (default: current directory)")
    cprint("  --postCommand <cmd>    The command to run after syncing (default: none)")
    cprint("  --time <cron>          The cron time format (default: '* * * * *')")
    cprint("")
    cprint("Example:")
    cprint("  git-autosync add --project-dir /path/to/repo --postCommand 'echo Hello' --time '0 * * * *'")
    cprint("")
end


local __xscript_input = {
    ["--project-dir"] = false,
    ["--post-command"] = false,
    ["--time"] = false, -- " * * * * * " - "Week Month Day Hour Minute"
}

-- support .git-autosync for multi-repo
-- git-url post-command time

function xpkg_main(action, projectdir, ...)

    local _, cmds = utils.input_args_process(
        __xscript_input,
        { ... }
    )

    config_file_check()

    if not action then action = "list" end

    cmds["--project-dir"] = projectdir
    cmds["--post-command"] = string.format([["%s"]], cmds["--post-command"] or [[echo No post command specified.]])
    if not cmds["--project-dir"] or cmds["--project-dir"] == "." then
        cmds["--project-dir"] = system.rundir()
    end

    _, cmds["--project-dir"] = utils.filepath_to_absolute(cmds["--project-dir"])

    cmds["--time"] = time_format(cmds)

    -- print info
    cprint("\t${bright}Git AutoSync Task - 0.0.1${clear}")

    cprint("")
    cprint("${dim}---")
    cprint("${bright}Action: ${dim bright cyan}%s${clear}", action)
    cprint("${bright}Project Dir: ${dim bright cyan}%s${clear}", cmds["--project-dir"])
    cprint("${bright}Time: ${dim bright cyan}%s${clear}", cmds["--time"])
    cprint("${bright}Post Command: ${dim bright cyan}%s${clear}", tostring(cmds["--post-command"]))
    cprint("${dim}---${clear}")
    cprint("")

    -- load task list
    local task_list = json.loadfile(task_list_file) or {}

    -- [project-dir] [time] [postCommand]
    -- add / list / remove / start / stop

    if action == "add" then
        action_add(cmds, task_list)
    elseif action == "list" then
        cprint("${bright}\tCurrent Tasks${clear}")
        cprint("\n${dim cyan}[project-dir]\t${bright yellow}[time]\t${green}[postCommand]")
        for project_dir, task in pairs(task_list) do
            -- [project-dir] [time] [postCommand]
            cprint("${dim cyan}%s${clear}  ${bright yellow}%s${clear}  ${dim green}%s${clear}", project_dir, task["time"], tostring(task["postCommand"]))
        end
    elseif action == "remove" then
        if not task_list[cmds["--project-dir"]] then
            log.error("Task for project dir [ %s ] does not exist!", cmds["--project-dir"])
            return
        end

        -- remove from task list
        task_list[cmds["--project-dir"]] = nil

        -- remove from crontab
        local crontab_content = io.readfile(crontab_file) or ""
        local new_crontab_content = ""
        for line in crontab_content:gmatch("[^\r\n]+") do
            if not line:find(cmds["--project-dir"], 1, true) then
                new_crontab_content = new_crontab_content .. line .. "\n"
            end
        end
        print(new_crontab_content)
        io.writefile(crontab_file, new_crontab_content)
        sync_to_system()
        json.savefile(task_list_file, task_list, { indent = true })

        log.info("Task for project dir [ %s ] removed!", cmds["--project-dir"])
    elseif action == "log" then
        if os.isfile(log_file) then
            os.exec("tail -n 100 %s", log_file)
        else
            log.warn("Log file does not exist!")
        end
    elseif action == "sync" then
        action_sync(cmds)
    else
        action_help()
    end
end